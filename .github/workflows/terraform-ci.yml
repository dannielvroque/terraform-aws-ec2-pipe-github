name: Terraform CI/CD

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Garante que todo o histórico seja baixado

      - name: Configurar AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Verificar estrutura do diretório
        run: ls -R  # Lista arquivos para depuração

      - name: Inicializar Terraform
        run: terraform init
        working-directory: ./terraform  # Ajuste conforme a estrutura do repositório

      - name: Validar Terraform
        run: terraform validate
        working-directory: ./terraform

      - name: Aplicar Terraform (com aprovação manual)
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve
        working-directory: ./terraform

  destroy:
    runs-on: ubuntu-latest
    needs: terraform  # Garante que esse job só rode após o Terraform Apply
    if: github.event_name == 'pull_request' && github.event.action == 'closed'  # Executa ao fechar um PR

    steps:
      - name: Configurar credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Baixar o código
        uses: actions/checkout@v4

      - name: Verificar estrutura do diretório
        run: ls -R  # Depuração

      - name: Destruir recursos com Terraform
        run: |
          terraform init
          terraform destroy -auto-approve
        working-directory: ./terraform  # Certifique-se de que este caminho está correto

      - name: Deletar instância EC2 (se existir)
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=Terraform-EC2" --query "Reservations[*].Instances[*].InstanceId" --output text)
          if [[ -n "$INSTANCE_ID" && "$INSTANCE_ID" != "None" ]]; then
            echo "Encerrando instância $INSTANCE_ID..."
            aws ec2 terminate-instances --instance-ids $INSTANCE_ID
          else
            echo "Nenhuma instância encontrada."
          fi